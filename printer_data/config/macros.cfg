[include btt_sfs2.cfg]
[exclude_object] # Enable exclude_object for adaptive meshing

#####################################
#----------CLIENT_VARIABLES----------
#####################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  # use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 220     # custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 228   # custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 15.0  # custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   # the value to retract while PAUSE
variable_cancel_retract   : 4.0   # the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  # allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 220     # different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 228   # different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True  # use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 180     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor Switch_Sensor"   ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
gcode:

####################################
#----------HOMING_OVERRIDE----------
####################################

[homing_override]
set_position_z: 0 # Make printer think Z axis is at zero, so we can force a move upwards away from build plate
axes: z #will only call override if x is involved in the homing call
gcode:
    G90 # Absolute Coordinates
    G1 Z10 F1500 # Move nozzle up 10mm to prevent accidentally scratching build plate    
    {% if "x" not in (printer.toolhead.homed_axes | lower) %}
        SENSORLESS_HOME_X
    {% endif %}
    {% if "y" not in (printer.toolhead.homed_axes | lower) %}
        SENSORLESS_HOME_Y
    {% endif %}
    PROBE_OUT
    G1 X111 Y86.5 F15000
    G28 Z
    G1 Z5
    #PROBE_IN

##############################
#----------SMARTHOME----------
##############################

[gcode_macro SMARTHOME]
description: Checks if printer is homed, if not will home the printer
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
        RESPOND TYPE=error MSG="PRINTER IS HOMED"
    {% else %}
        RESPOND TYPE=error MSG="PRINTER NEEDS TO BE HOMED..."
        G28
    {% endif %}

################################
#----------START_PRINT----------
################################

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro START_PRINT]
description: Starts the print
gcode:
  SAVE_GCODE_STATE NAME=start_print
  SET_PRESSURE_ADVANCE EXTRUDER=extruder SMOOTH_TIME=0.02
  {% set BED_TEMP = params.BED_TEMP|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
  RESPOND TYPE=error MSG="HEATING BED..."
  M190 S{BED_TEMP} # Heat bed for probing
  G90 # Use absolute coordinates
  SMARTHOME # Checks if printer is homed, if not will home the printer
  Z_TILT_ADJUST # Adjust Z tilt
  BED_MESH_PROFILE LOAD=default # Loading default bed mesh
  BED_MESH_CALIBRATE ADAPTIVE=1 # Generating a new bed mesh
  RESPOND TYPE=error MSG="SMART PARKING..."
  SMART_PARK
  RESPOND TYPE=error MSG="HEATING HOTEND..."
  M109 S{EXTRUDER_TEMP}  #Set and wait for nozzle to reach printing temperature
  RESPOND TYPE=error MSG="LINE PURGING..."
  VORON_PURGE
  RESPOND TYPE=error MSG="STARTING PRINT!"
    
##############################
#----------END_PRINT----------
##############################

[gcode_macro END_PRINT]
description: Ends the print
gcode:
  RESPOND TYPE=error MSG="TURNING OFF HEATERS & FANS..."
  TURN_OFF_HEATERS # Turns off heaters
  M106 S0 # Turns off fan
  RESPOND TYPE=error MSG="CLEARING BED MESH & Z OFFSET..."
  BED_MESH_CLEAR # Clears bed mesh
  SET_GCODE_OFFSET Z=0 MOVE=1 # Clears Z offset
  G91 # Incremental Coordinates
  G1 Z10 E-4 F6000 # Move nozzle 10mm up at 100mm/s while retracting 4mm
  G90 # Absolute Coordinates
  G1 X220 Y228 F6000 # Move nozzle to X220 and Y228 coordinates at 100mm/s
  RESPOND TYPE=error MSG="DISABLING STEPPERS"
  M84 # Disable steppers
  RESPOND TYPE=error MSG="PRINT FINISHED :)"

#################################
#----------CANCEL_PRINT----------
#################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  SET_GCODE_OFFSET Z=0 MOVE=1 # Clears Z offset
  BED_MESH_CLEAR # Clears bed mesh
  M84

######################################
#----------SENSORLESS_HOME_X----------
######################################

[gcode_macro SENSORLESS_HOME_X]
description: Sensorless home the X axis
gcode:
    RESPOND TYPE=error MSG="HOMING X AXIS..."
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X0 F1200

######################################
#----------SENSORLESS_HOME_Y----------
######################################

[gcode_macro SENSORLESS_HOME_Y]
description: Sensorless home the Y axis
gcode:
    RESPOND TYPE=error MSG="HOMING Y AXIS..."
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y0 F1200

##############################
#----------RESONANCE----------
##############################

[gcode_macro RESONANCE_X_TEST]
description: Resonance test the X axis
gcode:
  ACCELEROMETER_QUERY CHIP=hotend
  SMARTHOME
  PROBE_IN
  TEST_RESONANCES AXIS=X

[gcode_macro RESONANCE_Y_TEST]
description: Resonance test the Y axis
gcode:
  ACCELEROMETER_QUERY CHIP=bed
  SMARTHOME
  PROBE_IN
  TEST_RESONANCES AXIS=Y

[gcode_macro RESONANCE_COMBINED_TEST]
description: Resonance test the X & Y axis
gcode:
  SMARTHOME
  PROBE_IN
  # x axis resonance test
  RESPOND TYPE=error MSG="RESONANCE TESTING X AXIS..."
  ACCELEROMETER_QUERY CHIP=hotend
  TEST_RESONANCES AXIS=X
  
  # y axis resonance test
  RESPOND TYPE=error MSG="RESONANCE TESTING Y AXIS..."
  ACCELEROMETER_QUERY CHIP=bed
  TEST_RESONANCES AXIS=Y

######################################
#----------EXTRUDER_PID_TUNE----------
######################################

[gcode_macro PID_EXTRUDER]
description: Extruder PID Tuning
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

#################################
#----------BED_PID_TUNE----------
#################################

[gcode_macro PID_BED]
description: Bed PID Tuning
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

########################################
#----------SPOOLMAN_SET_ACTIVE----------
########################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

##########################################
#----------SPOOLMAN_CLEAR_ACTIVE----------
##########################################

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

###############################
#----------KLACKENDER----------
###############################

[gcode_macro PROBE_OUT]
description: Pick up klicky probe
gcode:
    RESPOND TYPE=error MSG="PICKING UP PROBE..."
    G90
    G1 X243 F15000
    G4 P300
    G1 Z15
    #G1 X220 F15000

[gcode_macro PROBE_IN]
description: Put away klicky probe
gcode:
    RESPOND TYPE=error MSG="PUTTING AWAY PROBE..."
    G90
    G1 Z20
    G1 X243 Y117.5 F15000
    G1 Z0
    G4 P300
    G1 X220 F15000
    G1 Z10
    #G1 X111 F15000

[gcode_macro BED_MESH_CALIBRATE] #macro with parameter passing
rename_existing: _BED_MESH_CALIBRATE
gcode:
    #PROBE_OUT
    RESPOND TYPE=error MSG="CALIBRATING BED MESH..."
    _BED_MESH_CALIBRATE {rawparams}
    PROBE_IN

[gcode_macro BED_LEVEL] #reliant on the macro above
gcode:
    BED_MESH_CALIBRATE

[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        SENSORLESS_HOME_X
        SENSORLESS_HOME_Y
        G28 Z
    {% endif %}
    PROBE_OUT
    G90
    G1 Z20
    G1 X111 Y86.5 F15000 ; Readjust for center of bed adjusted for probe offset
    _PROBE_CALIBRATE
    TESTZ Z=20
    M117 Remove the Klack to continue calibration!

[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        SENSORLESS_HOME_X
        SENSORLESS_HOME_Y
        G28 Z
    {% endif %}
    PROBE_OUT
    G90
    G1 X111 Y86.5 F15000 ; Readjust for center of bed adjusted for probe offset
    _PROBE_ACCURACY
    PROBE_IN

[gcode_macro Z_TILT_ADJUST] #Uncomment this macro if using dual z with z_tilt
rename_existing: _Z_TILT_ADJUST
gcode:
    SMARTHOME
    RESPOND TYPE=error MSG="ADJUSTING Z TILT..."
    _Z_TILT_ADJUST

[gcode_macro Z_TILT] #reliant on the macro above
gcode:
    Z_TILT_ADJUST

[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
gcode:
  SMARTHOME
  _SCREWS_TILT_CALCULATE

[gcode_macro SCREWS_TILT] #reliant on the macro above
gcode:
    SCREWS_TILT_CALCULATE
    
############################################
#----------SPEED/ACCELERATION_TEST----------
############################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED